{"version":3,"file":"react-form-core.cjs.production.min.js","sources":["../src/form/form.types.ts","../src/form/form.context.ts","../src/utils/debounce.ts","../src/utils/omit.ts","../src/validator/validator.element.tsx","../src/field/field.element.tsx","../src/form/form.tsx","../src/form/form.consumer.tsx","../src/validator/validator.with-validation.tsx"],"sourcesContent":["import { FormEvent, FormHTMLAttributes, ReactNode } from 'react';\n\nexport const initialState = {\n    value: {\n        errors: {},\n        ev: false as any,\n        initialValues: {},\n        resetted: false,\n        setError: (_name: string, _error: any) => {},\n        setInitialValue: (_name: string, _value: any) => {},\n        setSuccess: (_name: string, _success: any) => {},\n        setValue: (_name: string, _value: any) => {},\n        submitted: false,\n        successes: {},\n        values: {}\n    }\n};\nexport interface Values {\n    [key: string]: string\n}\nexport interface Errors {\n    [key: string]: string\n}\nexport interface Successes {\n    [key: string]: string\n}\nexport type OnSubmit = (formChildrenProps: FormChildrenProps) => void;\nexport interface FormProps extends FormHTMLAttributes<HTMLFormElement> {\n    OnSubmit?: OnSubmit\n    wait?: number\n}\nexport type SetInitialValue = (name: string, value: string) => void;\nexport type SetValue = (name: string, value: string) => void;\nexport type SetError = (name: string, error: string | string[] | Promise<any>) => void;\nexport type SetSuccess = (name: string, successes: string | string[] | Promise<any>) => void;\nexport interface FormChildrenProps {\n    errors: Errors\n    ev: FormEvent<HTMLFormElement>\n    initialValues: Values\n    resetted: boolean\n    setError: SetError\n    setInitialValue: SetInitialValue\n    setSuccess: SetSuccess\n    setValue: SetValue\n    submitted: boolean\n    successes: Successes\n    values: Values\n}\nexport interface FormChildren {\n    children: (formContext: FormChildrenProps) => ReactNode\n    [key: string]: any\n}\n","import * as React from 'react';\nimport { FormChildrenProps, initialState } from './form.types';\n\nexport const FormContext = React.createContext<FormChildrenProps>(initialState.value);\n","// @see: https://30secondsofcode.org/function#debounce\nexport const debounce = (fn: (...args: any[]) => void, ms = 0) => {\n    let timeout: any;\n\n    return (...args: any[]) => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            timeout = null;\n            fn.apply(null, args);\n        }, ms);\n    };\n};\n","interface Obj {\n    [key: string]: any\n}\n\n// https://30secondsofcode.org/object#omit\nexport const omit = (obj: Obj, arr: any[]) => {\n    return Object.keys(obj).reduce((acc: Obj, key: string) => {\n        if (!arr.includes(key)) {\n            acc[key] = obj[key];\n        }\n\n        return acc;\n    }, {});\n};\n","import * as React from 'react';\nimport { FormContext } from '../form';\nimport { ValidatorProps } from './validator.types';\n\nexport const Validator = ({ children, validation, name, ...rest }: ValidatorProps) => {\n    const { errors, setError, setSuccess, successes, values } = React.useContext(FormContext);\n\n    const getMessage = (onChange?: (ev: React.ChangeEvent<HTMLFormElement>) => any) => {\n        return (ev: React.ChangeEvent<HTMLFormElement>) => {\n            ev.preventDefault();\n\n            validation({\n                errors,\n                setError: (error) => {return setError(name, error); },\n                setSuccess: (success) => {return setSuccess(name, success); },\n                successes,\n                value: ev.target.value,\n                values\n            });\n\n            onChange && onChange(ev);\n        };\n    };\n    const element = children as React.ReactElement;\n\n    return React.cloneElement(element, {\n        ...rest,\n        onChange: getMessage(element?.props?.onChange)\n    });\n};\n","import * as React from 'react';\nimport { FormContext } from '../form';\nimport { FieldProps } from './fields.types';\n\nexport const Field = ({ checked, children, name, onChange, value, ...rest }: FieldProps) => {\n    const { setInitialValue, setValue, values } = React.useContext(FormContext);\n    const valueByName = values[name];\n    const childrenProps = children.props;\n    const childrenValue = childrenProps.value;\n    const hasCheckedAttr = /checkbox|radio/.test(childrenProps?.type);\n    const noneValue = childrenProps.multiple ? [''] : '';\n    const valueAttr = hasCheckedAttr\n        ? { checked: valueByName === value }\n        : { value: valueByName || noneValue };\n\n    const [onChangeEvent, setOnChangeEvent] = React.useState<any>();\n    const [fieldValue, setFieldValue] = React.useState<any>(valueByName);\n\n    if (!name) {\n        throw new Error('Error: Please, you have to add a name to the form field');\n    }\n\n    React.useEffect(() => {\n        let timer = 0;\n\n        // handle elements with on change\n        if (onChangeEvent && onChange) {\n            onChangeEvent && onChange && onChange(onChangeEvent);\n            timer = setTimeout(() => {return setValue(name, fieldValue); });\n        } else if (typeof fieldValue !== 'undefined') {\n            // avoid radio fields not checked\n            setValue(name, fieldValue);\n        }\n\n        // handle radio fields not checked\n        if (childrenProps?.type === 'radio') {\n            valueByName !== value && setFieldValue(undefined);\n        }\n\n        return () => {\n            timer && clearTimeout(timer as number);\n        };\n    }, [fieldValue, setValue]);\n\n    // Set initial values\n    React.useEffect(() => {\n        const checkedValue = childrenProps.checked ? childrenValue : '';\n        const initialValue = hasCheckedAttr ? checkedValue : childrenValue;\n\n        initialValue !== '' && setInitialValue(name, initialValue);\n        initialValue !== '' && setValue(name, initialValue);\n    }, []);\n\n    function handleChange(ev: React.ChangeEvent<HTMLFormElement>) {\n        const target = ev.target;\n        const newValue =\n            target.type === 'select-multiple'\n                ? Array.from(target.selectedOptions).map((option: any) => {\n                    return option.value;\n                })\n                : target.value;\n        const checkedValue = target.checked === true ? newValue : '';\n\n        ev.persist();\n\n        setFieldValue(hasCheckedAttr ? checkedValue : newValue);\n        setOnChangeEvent(ev);\n    }\n\n    return React.cloneElement(children, {\n        ...rest,\n        ...valueAttr,\n        name,\n        onChange: handleChange\n    });\n};\n","import * as React from 'react';\nimport { FormProps } from './form.types';\nimport { FormContext } from './form.context';\nimport { debounce, omit } from '../utils';\n\nexport const Form = ({ children, onReset, onSubmit, wait, ...rest }: FormProps) => {\n    const [state, setState] = React.useState({\n        errors: {},\n        ev: false as any,\n        initialValues: {},\n        resetted: false,\n        submitted: false,\n        successes: {},\n        values: {},\n        setError: debounce(handleError, !wait ? 750 : wait),\n        setInitialValue: handleInitialValue,\n        setSuccess: debounce(handleSuccess, !wait ? 750 : wait),\n        setValue: handleValue\n    });\n\n    React.useEffect(() => {\n        const submitted = state.submitted;\n\n        if (submitted && onSubmit) {\n            onSubmit({ ...state } as any);\n\n            setState((prevState) => {\n                return {\n                    ...prevState,\n                    submitted: false\n                };\n            });\n        }\n    }, [onSubmit, state]);\n\n    React.useEffect(() => {\n        const resetted = state.resetted;\n        const formEvent = state.ev;\n\n        if (formEvent && resetted && onReset) {\n            onReset({ ev: formEvent, ...state } as any);\n\n            setState((prevState) => {\n                return {\n                    ...prevState,\n                    resetted: false\n                };\n            });\n        }\n    }, [onReset, state]);\n\n    function handleInitialValue(name: string, initialValue: any) {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                initialValues: {\n                    ...prevState.initialValues,\n                    [name]: initialValue\n                },\n                values: {\n                    ...prevState.values,\n                    [name]: initialValue\n                }\n            };\n        });\n    }\n\n    function handleValue(name: string, newValue: any) {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                errors: omit(prevState.errors, [name]),\n                submitted: false,\n                successes: omit(state.successes, [name]),\n                values: {\n                    ...prevState.values,\n                    [name]: newValue\n                }\n            };\n        });\n    }\n\n    function handleError(name: string, error: any) {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                errors: {\n                    ...prevState.errors,\n                    [name]: error\n                }\n            };\n        });\n    }\n\n    function handleSuccess(name: string, success: any) {\n        setState((prevState) => {\n            return {\n                ...prevState,\n                successes: {\n                    ...prevState.successes,\n                    [name]: success\n                }\n            };\n        });\n    }\n\n    function handleSubmit(ev: React.FormEvent<HTMLFormElement>) {\n        ev.preventDefault();\n        ev.persist();\n\n        setState((prevState) => {\n            return {\n                ...prevState,\n                ev,\n                submitted: true\n            };\n        });\n    }\n\n    function handleReset(ev: React.FormEvent<HTMLFormElement>) {\n        ev.preventDefault();\n        ev.persist();\n\n        setState((prevState) => {\n            return {\n                ...prevState,\n                errors: {},\n                ev,\n                resetted: true,\n                successes: {},\n                values: prevState.initialValues\n            };\n        });\n    }\n\n    return (\n        <FormContext.Provider value={state}>\n            <form {...rest} onSubmit={handleSubmit} onReset={handleReset}>\n                {children}\n            </form>\n        </FormContext.Provider>\n    );\n};\n","import * as React from 'react';\nimport { FormContext } from './form.context';\nimport { FormChildren } from './form.types';\n\nexport const FormConsumer = ({ children }: FormChildren) => {\n    return <FormContext.Consumer>{children}</FormContext.Consumer>;\n};\n","import * as React from 'react';\nimport { Validator } from './validator.element';\n\nexport const withValidation = ({ name, validation, ...rest }: any) => {\n    return (FormField: React.ComponentType<any>) => {\n        return (\n            <Validator name={name} validation={validation}>\n                <FormField name={name} {...rest} />\n            </Validator>\n        );\n    };\n};\n"],"names":["initialState","value","errors","ev","initialValues","resetted","setError","_name","_error","setInitialValue","_value","setSuccess","_success","setValue","submitted","successes","values","FormContext","React","debounce","fn","ms","timeout","args","clearTimeout","setTimeout","apply","omit","obj","arr","Object","keys","reduce","acc","key","includes","Validator","onChange","children","validation","name","rest","element","props","_element$props","preventDefault","error","success","target","valueByName","childrenProps","childrenValue","hasCheckedAttr","test","type","valueAttr","checked","multiple","onChangeEvent","setOnChangeEvent","fieldValue","setFieldValue","Error","timer","undefined","initialValue","newValue","Array","from","selectedOptions","map","option","checkedValue","persist","onReset","onSubmit","wait","setState","prevState","state","formEvent","Provider","Consumer","FormField"],"mappings":"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"}